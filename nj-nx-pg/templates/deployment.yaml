apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-nj-deploy
  labels:
    app: argo-njnginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: argo-njnginx
  template:
    metadata:
      name: argo-njnginx
      labels:
        app: argo-njnginx
    spec:
      containers:
        - name: argo-njnginx
          image: {{.Values.image.nginx.repository}}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: /etc/nginx/conf.d
              name: nginx-config
      volumes:
        - name: nginx-config
          configMap:
            name: njnginx-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-nodejs-deploy
  labels:
    app: argo-nodejs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: argo-nodejs
  template:
    metadata:
      name: argo-nodejs
      labels:
        app: argo-nodejs
    spec:
      containers:
        - name: argo-nodejs
          image: {{.Values.image.nodejs.repository}}:{{.Values.image.nodejs.tag}}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              protocol: TCP
          env:
            - name: DB_HOST
              value: argo-postgre-svc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-postgre13-deploy
  labels:
    app: argo-postgre13
spec:
  replicas: 1
  selector:
    matchLabels:
      app: argo-postgre13
  template:
    metadata:
      name: argo-postgre13
      labels:
        app: argo-postgre13
    spec:
      containers:
        - name: argo-postgre13
          image: {{.Values.image.postgre.repository}}:{{.Values.image.postgre.tag}}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              protocol: TCP
          envFrom:
            - secretRef:
                name: postgre-pets-secret
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgre-storage
            - mountPath: /docker-entrypoint-initdb.d
              name: initdb-script
      volumes:
        - name: postgre-storage
          emptyDir: {}
        - name: initdb-script
          configMap:
            name: pets-initdb-config
